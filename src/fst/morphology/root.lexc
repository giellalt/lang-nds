! Divvun & Giellatekno - open source grammars for Low German language
! Copyright © 2015 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@uit.no or feedback@divvun.no

! ========================================================================== !
! !!            !!!Low German morphological analyser                      !
! ========================================================================== !
!! INTRODUCTION TO MORPHOLOGICAL ANALYSER OF Low German LANGUAGE.
 

Multichar_Symbols  !!≈ # Definitions for @CODE@
! for the i-umlaut of å and the u-umlaut of a
%{åöä%} !!≈ * @CODE@
%{Øäö%} !!≈ * @CODE@
%{aö%} !!≈ * @CODE@
%{Øä%} !!≈ * @CODE@

! for the the ablaut grades of the strong verb classes, the ordering of the letters roughly follows the ablaut grades
! long ablaut grade 1 as default
%{eiØ%} !! strong verb class 1 1st part
%{yaØ%} !! strong verb class 1 2nd part
%{eouü%} !! strong verb class 2a 1st part
%{Øeua%} !! strong verb class 2a 2nd part
%{uüØ%} !! strong verb class 2b 1st part
%{uaØ%} !! strong verb class 2b 2nd part
%{iua%} !! strong verb class 3a 
%{eoa%} !! strong verb class 3bc
%{iaeo%} !! strong verb class 4a 1st part
%{aeØ%} !! strong verb class 4ab 2nd part
%{eiao%} !! strong verb class 4b 1st part
%{eio%} !! strong verb class 4c 1st part
%{aØo%} !! strong verb class 4c 2nd part 
%{iae%} !! strong verb class 5a 1st part 
%{aeØ%} !! strong verb class 5ab 2nd part
%{eia%} !! strong verb class 5b 1st part


!! TRIGGERS

%^CC2C !!≈ * @CODE@  for Deleting second consonant in orthographic geminate
%^VV2V !!≈ * @CODE@  for Orthographic vowel deletion in open syllable
%^IUML !!≈ * @CODE@  for i-umlaut
%^UUML !!≈ * @CODE@  for u-umlaut
! %^ABL1O  !!≈ * @CODE@  for ablaut grade 1 in open syllable (ablaut grade 1 in closed syllable used as default) -- probably not needed, can be resolved by using %^VV2V
%^ABL1NL  !!≈ * @CODE@  for non-lengthened ablaut grade 1 in class 4 and 5 in some southern dialects, ABL1 = ablaut grade 1, NL = non-lengthened
! Historically short vowels in open syllable where lengthened. However, this lengthening did not happen in all instances. Especially in several southern dialects, the short vowel has been preserved, therefore "non-lengthened".
%^ABL1S  !!≈ * @CODE@  for shortened ablaut grade 1 in 2nd and 3rd sg. of present tense, S = shortened
! In Middle Low Saxon, the vowel of the 2nd and 3rd sg. was shortened before double consonants. 
%^ABL2  !!≈ * @CODE@  for ablaut grade 2 in preterite, ABL2 = ablaut grade 2
%^ABL2W  !!≈ * @CODE@  for specific preterite forms in Westphalian dialects, W = Westphalian
! Some Westphalian dialects, like those from Eastern Westphalia and the Sauerland, have preserved a vowel distinction between 1st and 3rd sg. vs. 2nd sg. and pl. 
%^ABL2U  !!≈ * @CODE@  for irregular umlaut of ablaut grade 2 in class 4a,b and 5, U = (irregular) umlaut
%^ABL3  !!≈ * @CODE@  for long ablaut grade 3 in perfect participle
%^ABL3NL  !!≈ * @CODE@  for short ablaut grade 3 in some southern dialects, NL = non-lengthened 


!! ## Analysis symbols
!  ----------------
!! The morphological analyses of wordforms for the Low German
!! language are presented in this system in terms of the following symbols.
!! (It is highly suggested to follow existing standards when adding new tags).

!! The parts-of-speech are:
 +N +A +Adv +V                                 !!≈
 +Pron +CS +CC +Adp +Po +Pr +Interj +Pcle +Num !!≈

!! The parts of speech are further split up into:
 +Prop +Pers +Dem +Interr +Refl +Recipr +Rel +Indef

!! The Usage extents are marked using following tags:
 +Err/Orth   
 +Use/-Spell 

!! The nominals are inflected in the following Case and Number
 +Sg +Du +Pl
 +Ess +Nom +Gen +Acc +Ill +Loc +Com +Com/Sh

!! The possession is marked as such:
 +PxSg1 +PxSg2 +PxSg3 +PxDu1 +PxDu2 +PxDu3 +PxPl1 +PxPl2 +PxPl3
!! The comparative forms are:
 +Comp +Superl
!! Numerals are classified under:
 +Attr +Card
 +Ord 
!! Verb moods are:
 +Ind +Prs +Prt +Pot +Cond +Imprt
!! Verb personal forms are:
 +Sg1 +Sg2 +Sg3 +Du1 +Du2 +Du3 +Pl1 +Pl2 +Pl3
!! Other verb forms are
 +Inf +Ger +ConNeg +ConNegII +Neg +ImprtII +PrsPrc +PrfPrc +Sup +VGen +VAbess

! Abbreviated words are classified with:
 +ABBR +ACR 
+Symbol !!≈ * @CODE@ = independent symbols in the text stream, like £, €, ©
!! Special symbols are classified with:
+CLB +PUNCT +LEFT +RIGHT
!! The verbs are syntactically split according to transitivity:
 +TV +IV
!! Special multiword units are analysed with:
 +Multi
!! Non-dictionary words can be recognised with:
 +Guess

!! Question and Focus particles:
 +Qst +Foc


!! Semantics are classified with
 +Mal +Fem +Sur 
 +Plc 
 +Org
 +Obj
 +Ani
 +Hum
 +Plant
 +Group
 +Time 
 +Txt
 +Route
 +Measr 
 +Wthr
 +Build 
 +Edu
 +Veh
 +Clth


!! Derivations are classified under the morphophonetic form of the suffix, the
!! source and target part-of-speech.
 +V→N +V→V +V→A
 +Der/xxx


!! Morphophonology
!  ---------------
!! To represent phonologic variations in word forms we use the following
!! symbols in the lexicon files:
 {aä} {oö} {uü}

!! And following triggers to control variation
 {front} {back}

!! ## Flag diacritics
!! We have manually optimised the structure of our lexicon using following
!! flag diacritics to restrict morhpological combinatorics - only allow compounds
!! with verbs if the verb is further derived into a noun again:
 @P.NeedNoun.ON@    !!≈ |  @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @D.NeedNoun.ON@    !!≈ |  @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @C.NeedNoun@       !!≈ |  @CODE@ | (Dis)allow compounds with verbs unless nominalised
!! 
!! For languages that allow compounding, the following flag diacritics are needed
!! to control position-based compounding restrictions for nominals. Their use is
!! handled automatically if combined with +CmpN/xxx tags. If not used, they will
!! do no harm.
 @P.CmpFrst.FALSE@ !!≈ |  @CODE@ | Require that words tagged as such only appear first
 @D.CmpPref.TRUE@  !!≈ |  @CODE@ | Block such words from entering ENDLEX
 @P.CmpPref.FALSE@ !!≈ |  @CODE@ | Block these words from making further compounds
 @D.CmpLast.TRUE@  !!≈ |  @CODE@ | Block such words from entering R
 @D.CmpNone.TRUE@  !!≈ |  @CODE@ | Combines with the next tag to prohibit compounding
 @U.CmpNone.FALSE@ !!≈ |  @CODE@ | Combines with the prev tag to prohibit compounding
 @P.CmpOnly.TRUE@  !!≈ |  @CODE@ | Sets a flag to indicate that the word has passed R
 @D.CmpOnly.FALSE@ !!≈ |  @CODE@ | Disallow words coming directly from root.
!! 
!! Use the following flag diacritics to control downcasing of derived proper
!! nouns (e.g. Finnish Pariisi -> pariisilainen). See e.g. North Sámi for how to use
!! these flags. There exists a ready-made regex that will do the actual down-casing
!! given the proper use of these flags.
 @U.Cap.Obl@        !!≈ |  @CODE@ | Allowing downcasing of derived names: deatnulasj.
 @U.Cap.Opt@        !!≈ |  @CODE@ | Allowing downcasing of derived names: deatnulasj.

LEXICON Root
!! The word forms in Low German language start from the lexeme roots of basic
!! word classes, or optionally from prefixes:
0   Nouns       ;
0   Verbs       ;
0   Adjectives  ;
0   Pronouns    ;
0   Numerals    ;
0   Prefixes    ;
0   Prepositions    ;
    Punctuation ;
    Symbols     ;


LEXICON PR_
+Pr: #;



LEXICON ENDLEX
#;

! vim: set ft=xfst-lexc:

LEXICON K
# ;
